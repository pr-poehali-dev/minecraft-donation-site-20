import json
import os
from typing import Dict, Any, List
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

def handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    '''
    Business: Telegram bot –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π Minecraft —Å–µ—Ä–≤–µ—Ä–∞ —Å –∫–æ—Ä–∑–∏–Ω–æ–π
    Args: event - dict —Å httpMethod, body
          context - –æ–±—ä–µ–∫—Ç —Å request_id
    Returns: HTTP response dict
    '''
    method: str = event.get('httpMethod', 'POST')
    
    if method == 'OPTIONS':
        return {
            'statusCode': 200,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type',
                'Access-Control-Max-Age': '86400'
            },
            'body': ''
        }
    
    if method != 'POST':
        return {
            'statusCode': 405,
            'headers': {'Content-Type': 'application/json'},
            'body': json.dumps({'error': 'Method not allowed'})
        }
    
    bot_token = os.environ.get('TELEGRAM_BOT_TOKEN', '')
    
    if not bot_token:
        return {
            'statusCode': 500,
            'headers': {'Content-Type': 'application/json'},
            'body': json.dumps({'error': 'Bot token not configured'})
        }
    
    body_data = json.loads(event.get('body', '{}'))
    update_data = body_data.get('update', {})
    
    application = Application.builder().token(bot_token).build()
    
    application.add_handler(CommandHandler('start', start_command))
    application.add_handler(CommandHandler('shop', shop_command))
    application.add_handler(CommandHandler('cart', cart_command))
    application.add_handler(CallbackQueryHandler(handle_callback))
    
    return {
        'statusCode': 200,
        'headers': {'Content-Type': 'application/json'},
        'body': json.dumps({'status': 'webhook_configured'})
    }

PRIVILEGES = [
    {
        'id': 'vip',
        'name': 'VIP',
        'price': 149,
        'features': ['–ü—Ä–∏–≤–∞—Ç–Ω–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è 20√ó20', '–¶–≤–µ—Ç–Ω–æ–π –Ω–∏–∫', '/hat - –ª—é–±–æ–π –±–ª–æ–∫ –∫–∞–∫ —à–ª—è–ø–∞']
    },
    {
        'id': 'premium',
        'name': 'PREMIUM',
        'price': 349,
        'features': ['–ü—Ä–∏–≤–∞—Ç–Ω–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è 40√ó40', '–†–∞–¥—É–∂–Ω—ã–π –Ω–∏–∫', '/hat + /fly –Ω–∞–≤—Å–µ–≥–¥–∞']
    },
    {
        'id': 'legend',
        'name': 'LEGEND',
        'price': 699,
        'features': ['–ü—Ä–∏–≤–∞—Ç–Ω–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è 60√ó60', '–ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∏–∫', '–í—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ VIP –∏ Premium']
    }
]

user_carts: Dict[int, List[Dict[str, Any]]] = {}

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π", callback_data='show_shop')],
        [InlineKeyboardButton("üõí –ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞", callback_data='show_cart')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        'üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ CLOY 2.0\n\n'
        'üéÆ –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:\n'
        '‚Ä¢ –í—ã–±—Ä–∞—Ç—å –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏\n'
        '‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –∏—Ö –≤ –∫–æ—Ä–∑–∏–Ω—É\n'
        '‚Ä¢ –û–ø–ª–∞—Ç–∏—Ç—å –æ–¥–Ω–∏–º –ø–ª–∞—Ç–µ–∂–æ–º\n\n'
        '–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n'
        '/shop - –æ—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω\n'
        '/cart - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É',
        reply_markup=reply_markup
    )

async def shop_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = []
    for priv in PRIVILEGES:
        keyboard.append([
            InlineKeyboardButton(
                f"{priv['name']} - {priv['price']}‚ÇΩ",
                callback_data=f"view_{priv['id']}"
            )
        ])
    keyboard.append([InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data='show_cart')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        'üõçÔ∏è *–ú–ê–ì–ê–ó–ò–ù –ü–†–ò–í–ò–õ–ï–ì–ò–ô*\n\n'
        '–í—ã–±–µ—Ä–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:',
        parse_mode='Markdown',
        reply_markup=reply_markup
    )

async def cart_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    cart = user_carts.get(user_id, [])
    
    if not cart:
        keyboard = [[InlineKeyboardButton("üõçÔ∏è –í –º–∞–≥–∞–∑–∏–Ω", callback_data='show_shop')]]
        await update.message.reply_text(
            'üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞\n\n–î–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞!',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return
    
    total = sum(item['price'] for item in cart)
    items_text = '\n'.join([f"‚Ä¢ {item['name']} - {item['price']}‚ÇΩ" for item in cart])
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data='checkout')],
        [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data='clear_cart')],
        [InlineKeyboardButton("üõçÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏", callback_data='show_shop')]
    ]
    
    await update.message.reply_text(
        f'üõí *–¢–í–û–Ø –ö–û–†–ó–ò–ù–ê*\n\n{items_text}\n\n'
        f'üí∞ *–ò—Ç–æ–≥–æ: {total}‚ÇΩ*',
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    data = query.data
    
    if data == 'show_shop':
        keyboard = []
        for priv in PRIVILEGES:
            keyboard.append([
                InlineKeyboardButton(
                    f"{priv['name']} - {priv['price']}‚ÇΩ",
                    callback_data=f"view_{priv['id']}"
                )
            ])
        keyboard.append([InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data='show_cart')])
        
        await query.edit_message_text(
            'üõçÔ∏è *–ú–ê–ì–ê–ó–ò–ù –ü–†–ò–í–ò–õ–ï–ì–ò–ô*\n\n'
            '–í—ã–±–µ—Ä–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:',
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    elif data.startswith('view_'):
        priv_id = data.replace('view_', '')
        privilege = next((p for p in PRIVILEGES if p['id'] == priv_id), None)
        
        if privilege:
            features_text = '\n'.join([f"‚úì {f}" for f in privilege['features']])
            keyboard = [
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_{priv_id}")],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–∞–≥–∞–∑–∏–Ω", callback_data='show_shop')]
            ]
            
            await query.edit_message_text(
                f"*{privilege['name']}*\n\n"
                f"üí∞ –¶–µ–Ω–∞: *{privilege['price']}‚ÇΩ*\n\n"
                f"üìã –ß—Ç–æ –≤—Ö–æ–¥–∏—Ç:\n{features_text}",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
    
    elif data.startswith('add_'):
        priv_id = data.replace('add_', '')
        privilege = next((p for p in PRIVILEGES if p['id'] == priv_id), None)
        
        if privilege:
            if user_id not in user_carts:
                user_carts[user_id] = []
            
            if any(item['id'] == priv_id for item in user_carts[user_id]):
                await query.answer('‚ö†Ô∏è –≠—Ç–∞ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è —É–∂–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ!', show_alert=True)
            else:
                user_carts[user_id].append({
                    'id': privilege['id'],
                    'name': privilege['name'],
                    'price': privilege['price']
                })
                await query.answer(f'‚úÖ {privilege["name"]} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!', show_alert=True)
                
                keyboard = [
                    [InlineKeyboardButton("üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data='show_cart')],
                    [InlineKeyboardButton("üõçÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏", callback_data='show_shop')]
                ]
                
                await query.edit_message_text(
                    f"‚úÖ *{privilege['name']}* –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!\n\n"
                    f"–ß—Ç–æ –¥–∞–ª—å—à–µ?",
                    parse_mode='Markdown',
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
    
    elif data == 'show_cart':
        cart = user_carts.get(user_id, [])
        
        if not cart:
            keyboard = [[InlineKeyboardButton("üõçÔ∏è –í –º–∞–≥–∞–∑–∏–Ω", callback_data='show_shop')]]
            await query.edit_message_text(
                'üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞\n\n–î–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞!',
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return
        
        total = sum(item['price'] for item in cart)
        items_text = '\n'.join([f"‚Ä¢ {item['name']} - {item['price']}‚ÇΩ" for item in cart])
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data='checkout')],
            [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data='clear_cart')],
            [InlineKeyboardButton("üõçÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏", callback_data='show_shop')]
        ]
        
        await query.edit_message_text(
            f'üõí *–¢–í–û–Ø –ö–û–†–ó–ò–ù–ê*\n\n{items_text}\n\n'
            f'üí∞ *–ò—Ç–æ–≥–æ: {total}‚ÇΩ*',
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    elif data == 'clear_cart':
        user_carts[user_id] = []
        
        keyboard = [[InlineKeyboardButton("üõçÔ∏è –í –º–∞–≥–∞–∑–∏–Ω", callback_data='show_shop')]]
        
        await query.edit_message_text(
            'üóëÔ∏è –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    elif data == 'checkout':
        cart = user_carts.get(user_id, [])
        
        if not cart:
            await query.answer('‚ö†Ô∏è –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!', show_alert=True)
            return
        
        total = sum(item['price'] for item in cart)
        items_text = '\n'.join([f"‚Ä¢ {item['name']}" for item in cart])
        
        await query.edit_message_text(
            f'üìù *–û–§–û–†–ú–õ–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê*\n\n'
            f'–¢–≤–æ–π –∑–∞–∫–∞–∑:\n{items_text}\n\n'
            f'üí∞ –ö –æ–ø–ª–∞—Ç–µ: *{total}‚ÇΩ*\n\n'
            f'–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:',
            parse_mode='Markdown'
        )
